#include <stdio.h>
#include <limits.h>

#define PLAYER 'X'
#define AI 'O'
#define EMPTY ' '

void printBoard(char board[3][3]) {
    printf("-------------\n");
    for (int i = 0; i < 3; i++) {
        printf("| %c | %c | %c |\n", board[i][0], board[i][1], board[i][2]);
        printf("-------------\n");
    }
}

int isMovesLeft(char board[3][3]) {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] == EMPTY)
                return 1;
    return 0;
}

int evaluate(char board[3][3]) {
    for (int row = 0; row < 3; row++) {
        if (board[row][0] == board[row][1] && board[row][1] == board[row][2]) {
            if (board[row][0] == AI)
                return +10;
            else if (board[row][0] == PLAYER)
                return -10;
        }
    }
    for (int col = 0; col < 3; col++) {
        if (board[0][col] == board[1][col] && board[1][col] == board[2][col]) {
            if (board[0][col] == AI)
                return +10;
            else if (board[0][col] == PLAYER)
                return -10;
        }
    }
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
        if (board[0][0] == AI)
            return +10;
        else if (board[0][0] == PLAYER)
            return -10;
    }
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
        if (board[0][2] == AI)
            return +10;
        else if (board[0][2] == PLAYER)
            return -10;
    }
    return 0;
}

int minimax(char board[3][3], int depth, int isMax) {
    int score = evaluate(board);
    if (score == 10)
        return score - depth;
    if (score == -10)
        return score + depth;
    if (isMovesLeft(board) == 0)
        return 0;
    if (isMax) {
        int best = INT_MIN;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = AI;
                    best = (minimax(board, depth + 1, !isMax) > best) ? minimax(board, depth + 1, !isMax) : best;
                    board[i][j] = EMPTY;
                }
            }
        }
        return best;
    } else {
        int best = INT_MAX;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = PLAYER;
                    best = (minimax(board, depth + 1, !isMax) < best) ? minimax(board, depth + 1, !isMax) : best;
                    board[i][j] = EMPTY;
                }
            }
        }
        return best;
    }
}

void findBestMove(char board[3][3], int *bestMoveRow, int *bestMoveCol) {
    int bestVal = INT_MIN;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == EMPTY) {
                board[i][j] = AI;
                int moveVal = minimax(board, 0, 0);
                board[i][j] = EMPTY;
                if (moveVal > bestVal) {
                    *bestMoveRow = i;
                    *bestMoveCol = j;
                    bestVal = moveVal;
                }
            }
        }
    }
}

int checkWin(char board[3][3]) {
    int score = evaluate(board);
    if (score == 10)
        return 1;
    if (score == -10)
        return 1;
    if (!isMovesLeft(board))
        return 2;
    return 0;
}

int main() {
    char board[3][3] = {
        { EMPTY, EMPTY, EMPTY },
        { EMPTY, EMPTY, EMPTY },
        { EMPTY, EMPTY, EMPTY }
    };
    int row, col;
    printf("Welcome to Tic-Tac-Toe!\n");
    printf("You are 'X' and the AI is 'O'.\n");
    while (1) {
        printBoard(board);
        printf("Enter your move (row and column): ");
        scanf("%d %d", &row, &col);
        if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == EMPTY) {
            board[row][col] = PLAYER;
            int result = checkWin(board);
            if (result == 1) {
                printBoard(board);
                printf("Congratulations! You have won!\n");
                break;
            } else if (result == 2) {
                printBoard(board);
                printf("It's a draw!\n");
                break;
            }
            int bestMoveRow, bestMoveCol;
            findBestMove(board, &bestMoveRow, &bestMoveCol);
            board[bestMoveRow][bestMoveCol] = AI;
            result = checkWin(board);
            if (result == 1) {
                printBoard(board);
                printf("The AI has won! Better luck next time.\n");
                break;
            } else if (result == 2) {
                printBoard(board);
                printf("It's a draw!\n");
                break;
            }
        } else {
            printf("Invalid move! Try again.\n");
        }
    }
    return 0;
}
